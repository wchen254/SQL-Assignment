--1.
--Join will perform better, since SQL will have an optimizer on JOIN.

--2.
--CTE stands for Common Table Expression. When you wnat to creat a recursive query which refrence itself mutiple times. And when we need to organize long and complex queries.

--3.
--The table variable is a special type of the local variable that helps to store table temporarily. Only accessible on current batch that declares the table variable.

--4.
--The DELETE command deletes only the rows from the table based on the condition given in the where clause. But it does not free the space containing the table
--The TRUNCATE command is used to delete all the rows from the table and free the space.
--TRUNCATE is faster than DELETE, since it doesn't scan every record before removing it. And DELETE logging each row in the transaction log will cause resource overhead.

--5.
--An identity column is a columnin a database table that is made up of values generated by the database. DELETE retains the identity and does not reset it to the seed value.
--TRUNCATE reset the identity to its seed value.

--1.
SELECT DISTINCT City
FROM Employees
WHERE City IN (
SELECT City
FROM Customers
)

--2.a
SELECT DISTINCT City
FROM Customers
WHERE City NOT IN (
SELECT City
FROM Employees
)

--2.b
SELECT City
FROM Customers
ExCEPT
SELECT City
FROM Employees

--3.
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS [Total Order Quantity]
FROM Products p
LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName

--4.
SELECT c.City, COUNT(od.ProductID) AS [Total Products]
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.City

--5.a
SELECT City, COUNT(CustomerID) AS count
FROM Customers
GROUP BY City
HAVING COUNT(CustomerID) = 2
UNION
SELECT City, COUNT(CustomerID) AS count
FROM Customers
GROUP BY City
HAVING COUNT(CustomerID) > 2

--5.b
SELECT *
FROM 
(
SELECT City, COUNT(CustomerID) AS count
FROM Customers
GROUP BY City
HAVING COUNT(CustomerID) >= 2
) dt

--6.
SELECT c.City, COUNT(DISTINCT od.ProductID) AS [kinds of products ordered]
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.City
HAVING COUNT(DISTINCT od.ProductID) >= 2
ORDER BY c.City

--7.
SELECT o.OrderID, c.CustomerID, c.CompanyName, c.ContactName, c.City, o.ShipCity
FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID
WHERE c.City != o.ShipCity

--8.

SELECT od1.ProductID, c.city, od1.UnitPrice, SUM(od1.Quantity) AS [total quantity]
FROM [Order Details] od1 JOIN Orders o ON od1.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID
WHERE od1.ProductID IN
(
SELECT TOP 5 od.ProductID
FROM [Order Details] od
GROUP BY od.ProductID
ORDER BY COUNT(od.OrderID) DESC
)
GROUP BY od1.ProductID, c.City, od1.UnitPrice
ORDER BY 1,4 DESC


--9.a
SELECT em.City
FROM Employees em
WHERE em.City NOT IN (
SELECT c.City
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID
)

--9.b
SELECT em.City
FROM Employees em
EXCEPT
SELECT c.City
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID

--10.
SELECT em.EmployeeID, c.City, COUNT(o.OrderID) AS [orders]
FROM Employees em JOIN Orders o ON em.EmployeeID = o.EmployeeID JOIN Customers c ON o.CustomerID = c.CustomerID
WHERE c.City IN (SELECT TOP 1 c.City
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.City
ORDER BY SUM(od.Quantity) DESC)
GROUP BY em.EmployeeID, c.City
ORDER BY 3 DESC

--11.
--We can use the SQL RANK function to remove the duplicate rows. SQL RANK function gives unique row ID for each row irrespective of the duplicate row.
--We use a RANK function with the PARTITION BY clause. The PARTITION BY clause prepares a subset of data for the specified columns and gives rank for that partition.

--12.
SELECT e.empid
FROM Employee e
WHERE e.empid not in (SELECT mgrid FROM Employee)


--OR

SELECT e.EmployeeID
FROM Employees e
EXCEPT
SELECT DISTINCT ReportsTo FROM Employees

--13.

SELECT dt.deptname, dt.[total empployee]
FROM
(SELECT d.deptname, COUNT(e.empid) AS [total empployee], RANK() OVER(ORDER BY COUNT(e.empid) DESC) RNK
FROM Employee e JOIN Dept d ON e.deptid = d.deptid
GROUP BY deptname
) dt
WHERE RNK = 1
ORDER BY deptname

--14.
SELECT dt.deptname, dt.empid, dt.salary, dt.RNK
FROM 
(
SELECT d.deptname, e.empid, e.salary, RANK() OVER(ORDER BY e.salary DESC) RNK
FROM Employee e JOIN Dept d ON e.deptid = d.deptid
GROUP BY d.deptname, e.empid, e.salary)
) dt
WHERE RNK <=3
ORDER BY deptname
